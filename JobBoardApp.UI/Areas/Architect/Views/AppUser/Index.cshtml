@model IEnumerable<UserDTO>

@functions {
    // Helper function to determine CSS class for role badges
    public string GetRoleBadgeClass(string role)
    {
        return role switch
        {
            "Architect" => "badge bg-danger",
            "Employer" => "badge bg-primary",
            "Job Seeker" => "badge bg-success",
            _ => "badge bg-secondary" // Default class for other roles
        };
    }
}

<div class="container py-5">
    <h2 class="text-center mb-5">All Users</h2>

    <div class="table-responsive">
        <table class="table table-bordered table-hover" id="usersTable">
            <thead>
                <tr>
                    <th>UserName</th>
                    <th>Roles</th>
                    <th>Is Active</th>
                    <th>Last Login Date</th>
                    <th>Email</th>
                    <th>Date Registered</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in Model)
                {
                    <tr>
                        <td>@user.UserName</td>
                        <td>
                            @foreach (var role in user.Roles)
                            {
                                <span class="@GetRoleBadgeClass(role)">@role</span>
                            }
                        </td>
                        <td>
                            @if (user.IsActive)
                            {
                                <button class="btn btn-outline-danger btn-sm"
                                        onclick="deactivateUser('@user.UserName')">
                                    Deactivate
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-outline-success btn-sm"
                                        onclick="activateUser('@user.UserName')">
                                    Activate
                                </button>
                            }
                        </td>
                        <td>@user.LastLoginDate?.ToString("g")</td>
                        <td>@user.Email</td>
                        <td>@user.DateRegistered.ToShortDateString()</td>
                        <td>
                            <button type="button" class="btn btn-outline-info btn-sm"
                                    onclick="viewUserDetails('@user.UserName',
                                    '@string.Join(", ", user.Roles)',
                                    '@user.IsActive',
                                    '@user.LastLoginDate',
                                    '@user.Email',
                                    '@user.DateRegistered')">
                                <i class="bi bi-info-circle"></i> Details
                            </button>

                            <button type="button" class="btn btn-outline-warning btn-sm"
                                    onclick="suspendUser('@user.UserName')">
                                Suspend
                            </button>

                            <button type="button" class="btn btn-outline-success btn-sm"
                                    onclick="unlockUser('@user.UserName')">
                                Unlock
                            </button>

                            <button type="button" class="btn btn-outline-secondary btn-sm"
                                    onclick="resetPassword('@user.UserName')">
                                Reset Password
                            </button>

                            <button type="button" class="btn btn-outline-primary btn-sm"
                                    onclick="assignRole('@user.UserName')">
                                Assign Role
                            </button>

                            <button type="button" class="btn btn-outline-danger btn-sm"
                                    onclick="confirmDeleteUser('@user.UserName')">
                                <i class="bi bi-trash"></i> Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@section Scripts {
    <script>
        initializeDataTable('#usersTable', 6);

        function activateUser(userName) {
            Swal.fire({
                title: 'Activate User?',
                text: "Are you sure you want to activate this user?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, activate!'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.post(`/api/User/Activate/${userName}`, function(response) {
                        if (response.success) {
                            Swal.fire('Activated!', `${userName} has been activated.`, 'success').then(() => location.reload());
                        } else {
                            Swal.fire('Error!', response.message, 'error');
                        }
                    });
                }
            });
        }

        function deactivateUser(userName) {
            Swal.fire({
                title: 'Deactivate User?',
                text: "Are you sure you want to deactivate this user?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, deactivate!'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.post(`/api/User/Deactivate/${userName}`, function(response) {
                        if (response.success) {
                            Swal.fire('Deactivated!', `${userName} has been deactivated.`, 'success').then(() => location.reload());
                        } else {
                            Swal.fire('Error!', response.message, 'error');
                        }
                    });
                }
            });
        }

        function suspendUser(userName) {
            Swal.fire({
                title: 'Suspend User',
                input: 'textarea',
                inputLabel: 'Reason for Suspension',
                inputPlaceholder: 'Enter reason for suspension',
                showCancelButton: true,
                confirmButtonText: 'Suspend',
                showLoaderOnConfirm: true,
                preConfirm: (reason) => {
                    return $.post(`/api/User/Suspend`, { userName, reason });
                },
                allowOutsideClick: () => !Swal.isLoading()
            }).then((result) => {
                if (result.isConfirmed) {
                    Swal.fire('Suspended!', `${userName} has been suspended.`, 'success').then(() => location.reload());
                }
            });
        }

        function unlockUser(userName) {
            Swal.fire({
                title: 'Unlock User?',
                text: "Are you sure you want to unlock this user?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, unlock!'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.post(`/api/User/Unlock/${userName}`, function(response) {
                        if (response.success) {
                            Swal.fire('Unlocked!', `${userName} has been unlocked.`, 'success').then(() => location.reload());
                        } else {
                            Swal.fire('Error!', response.message, 'error');
                        }
                    });
                }
            });
        }

        function resetPassword(userName) {
            Swal.fire({
                title: 'Reset Password',
                input: 'password',
                inputLabel: 'New Password',
                showCancelButton: true,
                confirmButtonText: 'Reset',
                preConfirm: (newPassword) => {
                    return $.post(`/api/User/ResetPassword`, { userName, newPassword });
                },
                allowOutsideClick: () => !Swal.isLoading()
            }).then((result) => {
                if (result.isConfirmed) {
                    Swal.fire('Password Reset!', `${userName}'s password has been reset.`, 'success').then(() => location.reload());
                }
            });
        }

        function assignRole(userName) {
            Swal.fire({
                title: 'Assign Role',
                input: 'text',
                inputLabel: 'Role Name',
                showCancelButton: true,
                confirmButtonText: 'Assign',
                preConfirm: (role) => {
                    return $.post(`/api/User/AssignRole`, { userName, role });
                },
                allowOutsideClick: () => !Swal.isLoading()
            }).then((result) => {
                if (result.isConfirmed) {
                    Swal.fire('Role Assigned!', `${userName} has been assigned the role.`, 'success').then(() => location.reload());
                }
            });
        }

        function confirmDeleteUser(userName) {
            Swal.fire({
                title: 'Delete User?',
                text: "Are you sure you want to delete this user?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete!'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.post(`/api/User/Delete/${userName}`, function(response) {
                        if (response.success) {
                            Swal.fire('Deleted!', `${userName} has been deleted.`, 'success').then(() => location.reload());
                        } else {
                            Swal.fire('Error!', response.message, 'error');
                        }
                    });
                }
            });
        }
    </script>
}
